<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
	PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
	"http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
	<display-name>Monarch API Manager</display-name>
    <description>Monarch API Manager</description>

    <!--
		- Key of the system property that should specify the root directory of this
		- web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>api-manager.root</param-value>
	</context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>file:${monarch.config}/application-context.xml</param-value>
	</context-param>

	<!--
		- Location of the Log4J config file, for initialization and refresh checks.
		- Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>file:${monarch.config}/log4j.properties</param-value>
	</context-param>
	
	<filter>
		<filter-name>CorsFilter</filter-name>
		<display-name>CORS Filter</display-name>
		<description>The filter that adds CORS headers to responses</description>
		<filter-class>com.monarchapis.apimanager.servlet.CorsFilter</filter-class>
	</filter>
	
	<filter>
		<filter-name>ApiFilter</filter-name>
		<display-name>API Filter</display-name>
		<description>The filter that intercepts API calls</description>
		<filter-class>com.monarchapis.apimanager.servlet.ApiFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>CorsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>ApiFilter</filter-name>
		<url-pattern>/management/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>ApiFilter</filter-name>
		<url-pattern>/service/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>ApiFilter</filter-name>
		<url-pattern>/analytics/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>ApiFilter</filter-name>
		<url-pattern>/event/*</url-pattern>
	</filter-mapping>
	
	<listener>
		<listener-class>com.monarchapis.apimanager.servlet.SystemPropertiesListener</listener-class>
	</listener>
	
	<!--
		- Configures Log4J for this web app.
		- As this context specifies a context-param "log4jConfigLocation", its file path
		- is used to load the Log4J configuration, including periodic refresh checks.
		-
		- Would fall back to default Log4J initialization (non-refreshing) if no special
		- context-params are given.
		-
		- Exports a "web app root key", i.e. a system property that specifies the root
		- directory of this web app, for usage in log file paths.
		- This web app specifies "petportal.root" (see log4j.properties file).
	-->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!--
		- Loads the root application context of this web app at startup,
		- by default from "/WEB-INF/applicationContext.xml".
		- Note that you need to fall back to Spring's ContextLoaderServlet for
		- J2EE servers that do not follow the Servlet 2.4 initialization order.
		-
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		- to access it anywhere in the web application, outside of the framework.
		-
		- The root context is the parent of all servlet-specific contexts.
		- This means that its beans are automatically available in these child contexts,
		- both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<listener>
          <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<listener>
          <listener-class>com.monarchapis.apimanager.servlet.ServerContextListener</listener-class>
	</listener>
	
	<!-- API Jersey Servlets -->
	
	<servlet>
        <servlet-name>Open API</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.monarchapis.apimanager.rest.common,com.monarchapis.apimanager.rest.open</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
	<servlet>
        <servlet-name>Management API</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.monarchapis.apimanager.rest.common,com.monarchapis.apimanager.rest.management</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
	
	<servlet>
        <servlet-name>Service API</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.monarchapis.apimanager.rest.common,com.monarchapis.apimanager.rest.service</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet>
        <servlet-name>Analytics API</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.monarchapis.apimanager.rest.common,com.monarchapis.apimanager.rest.analytics</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
	
	<servlet>
        <servlet-name>Command API</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.monarchapis.apimanager.rest.common,com.monarchapis.apimanager.rest.command</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
		<servlet-name>Open API</servlet-name>
		<url-pattern>/open/*</url-pattern>
	</servlet-mapping>
	
    <servlet-mapping>
		<servlet-name>Management API</servlet-name>
		<url-pattern>/management/*</url-pattern>
	</servlet-mapping>
	
    <servlet-mapping>
		<servlet-name>Service API</servlet-name>
		<url-pattern>/service/*</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>Analytics API</servlet-name>
		<url-pattern>/analytics/*</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>Command API</servlet-name>
		<url-pattern>/command/*</url-pattern>
	</servlet-mapping>
</web-app>