#!/bin/sh

# Copyright (C) 2015 CapTech Ventures, Inc.
# (http://www.captechconsulting.com) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -----------------------------------------------------------------------------
# Control Script for the Monarch API Manager
#
# Environment Variable Prerequisites
#
#   Do not set the variables in this script. Instead put them into a script
#   setenv.sh in MONARCH_HOME/bin to keep your customizations separate.
#
#   MONARCH_HOME    May point at your Monarch "build" directory.
#
#   MONARCH_CONFIG (Optional) Full path to a file where the configuration files are located.
#                   Default is $MONARCH_HOME/conf
#
#   MONARCH_LOGS    (Optional) Full path to a file where the log files should be directed.
#                   Default is $MONARCH_HOME/logs
#
#   MONARCH_OPTS    (Optional) Java runtime options used when the "start",
#                   "run" or "debug" command is executed.
#                   Include here and not in JAVA_OPTS all options, that should
#                   only be used by Monarch itself, not by the stop process,
#                   the version command etc.
#                   Examples are heap size, GC logging, JMX ports etc.
#
#   JAVA_HOME       Must point at your Java Development Kit installation.
#                   Required to run the with the "debug" argument.
#
#   JRE_HOME        Must point at your Java Runtime installation.
#                   Defaults to JAVA_HOME if empty. If JRE_HOME and JAVA_HOME
#                   are both set, JRE_HOME is used.
#
#   JAVA_OPTS       (Optional) Java runtime options used when any command
#                   is executed.
#                   Include here and not in MONARCH_OPTS all options, that
#                   should be used by Monarch and also by the stop process,
#                   the version command etc.
#                   Most options should go into MONARCH_OPTS.
#
#   JPDA_TRANSPORT  (Optional) JPDA transport used when the "jpda start"
#                   command is executed. The default is "dt_socket".
#
#   JPDA_ADDRESS    (Optional) Java runtime options used when the "jpda start"
#                   command is executed. The default is localhost:8000.
#
#   JPDA_SUSPEND    (Optional) Java runtime options used when the "jpda start"
#                   command is executed. Specifies whether JVM should suspend
#                   execution immediately after startup. Default is "n".
#
#   JPDA_OPTS       (Optional) Java runtime options used when the "jpda start"
#                   command is executed. If used, JPDA_TRANSPORT, JPDA_ADDRESS,
#                   and JPDA_SUSPEND are ignored. Thus, all required jpda
#                   options MUST be specified. The default is:
#
#                   -agentlib:jdwp=transport=$JPDA_TRANSPORT,
#                       address=$JPDA_ADDRESS,server=y,suspend=$JPDA_SUSPEND
#
#   MONARCH_PID     (Optional) Path of the file which should contains the pid
#                   of the Monarch startup java process, when start (fork) is
#                   used
# -----------------------------------------------------------------------------

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false
darwin=false
os400=false
case "`uname`" in
CYGWIN*) cygwin=true;;
Darwin*) darwin=true;;
OS400*) os400=true;;
esac

# resolve links - $0 may be a softlink
PRG="$0"

while [ -h "$PRG" ]; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done

# Get standard environment variables
PRGDIR=`dirname "$PRG"`

# Only set MONARCH_HOME if not already set
[ -z "$MONARCH_HOME" ] && MONARCH_HOME=`cd "$PRGDIR/.." >/dev/null; pwd`

# Ensure that neither MONARCH_HOME nor MONARCH_BASE contains a colon
# as this is used as the separator in the classpath and Java provides no
# mechanism for escaping if the same character appears in the path.
case $MONARCH_HOME in
  *:*) echo "Using MONARCH_HOME:   $MONARCH_HOME";
       echo "Unable to start as MONARCH_HOME contains a colon (:) character";
       exit 1;
esac

# Ensure that any user defined CLASSPATH variables are not used on startup,
# but allow them to be specified in setenv.sh, in rare case when it is needed.
CLASSPATH=

if [ -r "$MONARCH_HOME/bin/setenv.sh" ]; then
  . "$MONARCH_HOME/bin/setenv.sh"
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$JRE_HOME" ] && JRE_HOME=`cygpath --unix "$JRE_HOME"`
  [ -n "$MONARCH_HOME" ] && MONARCH_HOME=`cygpath --unix "$MONARCH_HOME"`
  [ -n "$CLASSPATH" ] && CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For OS400
if $os400; then
  # Set job priority to standard for interactive (interactive - 6) by using
  # the interactive priority - 6, the helper threads that respond to requests
  # will be running at the same priority as interactive jobs.
  COMMAND='chgjob job('$JOBNAME') runpty(6)'
  system $COMMAND

  # Enable multi threading
  export QIBM_MULTI_THREADED=Y
fi

# Get standard Java environment variables
if $os400; then
  # -r will Only work on the os400 if the files are:
  # 1. owned by the user
  # 2. owned by the PRIMARY group of the user
  # this will not work if the user belongs in secondary groups
  . "$MONARCH_HOME"/bin/setclasspath.sh
else
  if [ -r "$MONARCH_HOME"/bin/setclasspath.sh ]; then
    . "$MONARCH_HOME"/bin/setclasspath.sh
  else
    echo "Cannot find $MONARCH_HOME/bin/setclasspath.sh"
    echo "This file is needed to run this program"
    exit 1
  fi
fi

# Add on extra jar files to CLASSPATH
if [ ! -z "$CLASSPATH" ] ; then
  CLASSPATH="$CLASSPATH":
fi
CLASSPATH="$CLASSPATH""$MONARCH_HOME"/bin/bootstrap.jar

if [ -z "$MONARCH_CONFIG" ] ; then
  MONARCH_CONFIG="$MONARCH_HOME"/conf
fi

if [ -z "$MONARCH_LOGS" ] ; then
  MONARCH_LOGS="$MONARCH_HOME"/logs
fi

# Bugzilla 37848: When no TTY is available, don't output to console
have_tty=0
if [ "`tty`" != "not a tty" ]; then
    have_tty=1
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  JAVA_HOME=`cygpath --absolute --windows "$JAVA_HOME"`
  JRE_HOME=`cygpath --absolute --windows "$JRE_HOME"`
  MONARCH_HOME=`cygpath --absolute --windows "$MONARCH_HOME"`
  MONARCH_CONFIG=`cygpath --absolute --windows "$MONARCH_CONFIG"`
  MONARCH_LOGS=`cygpath --absolute --windows "$MONARCH_LOGS"`
  CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  JAVA_ENDORSED_DIRS=`cygpath --path --windows "$JAVA_ENDORSED_DIRS"`
fi

# ----- Execute The Requested Command -----------------------------------------

# Bugzilla 37848: only output this if we have a TTY
if [ $have_tty -eq 1 ]; then
  echo "Using MONARCH_HOME:    $MONARCH_HOME"
  echo "Using MONARCH_CONFIG:  $MONARCH_CONFIG"
  echo "Using MONARCH_LOGS:    $MONARCH_LOGS"
  if [ "$1" = "debug" ] ; then
    echo "Using JAVA_HOME:       $JAVA_HOME"
  else
    echo "Using JRE_HOME:        $JRE_HOME"
  fi
  echo "Using CLASSPATH:       $CLASSPATH"
  if [ ! -z "$MONARCH_PID" ]; then
    echo "Using MONARCH_PID:     $MONARCH_PID"
  fi
fi

if [ "$1" = "jpda" ] ; then
  if [ -z "$JPDA_TRANSPORT" ]; then
    JPDA_TRANSPORT="dt_socket"
  fi
  if [ -z "$JPDA_ADDRESS" ]; then
    JPDA_ADDRESS="localhost:8000"
  fi
  if [ -z "$JPDA_SUSPEND" ]; then
    JPDA_SUSPEND="n"
  fi
  if [ -z "$JPDA_OPTS" ]; then
    JPDA_OPTS="-agentlib:jdwp=transport=$JPDA_TRANSPORT,address=$JPDA_ADDRESS,server=y,suspend=$JPDA_SUSPEND"
  fi
  MONARCH_OPTS="$MONARCH_OPTS $JPDA_OPTS"
  shift
fi

if [ "$1" = "debug" ] ; then
  if $os400; then
    echo "Debug command not available on OS400"
    exit 1
  else
    shift
    exec "$_RUNJDB" $JAVA_OPTS $MONARCH_OPTS \
      -Djava.endorsed.dirs="$JAVA_ENDORSED_DIRS" -classpath "$CLASSPATH" \
      -sourcepath "$MONARCH_HOME"/../../java \
      -Dmonarch.home="$MONARCH_HOME" \
      -Dmonarch.config="$MONARCH_CONFIG" \
      -Dmonarch.logs="$MONARCH_LOGS" \
      com.monarchapis.apimanager.startup.Bootstrap "$@" start
  fi

elif [ "$1" = "run" ]; then

  shift
  eval exec "\"$_RUNJAVA\"" $JAVA_OPTS $MONARCH_OPTS \
    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \
    -Dmonarch.home="\"$MONARCH_HOME\"" \
    -Dmonarch.config="$MONARCH_CONFIG" \
    -Dmonarch.logs="$MONARCH_LOGS" \
    com.monarchapis.apimanager.startup.Bootstrap "$@" start

elif [ "$1" = "start" ] ; then

  if [ ! -z "$MONARCH_PID" ]; then
    if [ -f "$MONARCH_PID" ]; then
      if [ -s "$MONARCH_PID" ]; then
        echo "Existing PID file found during start."
        if [ -r "$MONARCH_PID" ]; then
          PID=`cat "$MONARCH_PID"`
          ps -p $PID >/dev/null 2>&1
          if [ $? -eq 0 ] ; then
            echo "Monarch appears to still be running with PID $PID. Start aborted."
            exit 1
          else
            echo "Removing/clearing stale PID file."
            rm -f "$MONARCH_PID" >/dev/null 2>&1
            if [ $? != 0 ]; then
              if [ -w "$MONARCH_PID" ]; then
                cat /dev/null > "$MONARCH_PID"
              else
                echo "Unable to remove or clear stale PID file. Start aborted."
                exit 1
              fi
            fi
          fi
        else
          echo "Unable to read PID file. Start aborted."
          exit 1
        fi
      else
        rm -f "$MONARCH_PID" >/dev/null 2>&1
        if [ $? != 0 ]; then
          if [ ! -w "$MONARCH_PID" ]; then
            echo "Unable to remove or write to empty PID file. Start aborted."
            exit 1
          fi
        fi
      fi
    fi
  fi

  shift
  eval "\"$_RUNJAVA\"" $JAVA_OPTS $MONARCH_OPTS \
    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \
    -Dmonarch.home="\"$MONARCH_HOME\"" \
    -Dmonarch.config="$MONARCH_CONFIG" \
    -Dmonarch.logs="$MONARCH_LOGS" \
    com.monarchapis.apimanager.startup.Bootstrap "$@" start \
    >> /dev/null 2>&1 "&"

  if [ ! -z "$MONARCH_PID" ]; then
    echo $! > "$MONARCH_PID"
  fi

  echo "Monarch started."

elif [ "$1" = "stop" ] ; then

  shift

  SLEEP=5
  if [ ! -z "$1" ]; then
    echo $1 | grep "[^0-9]" >/dev/null 2>&1
    if [ $? -gt 0 ]; then
      SLEEP=$1
      shift
    fi
  fi

  FORCE=0
  if [ "$1" = "-force" ]; then
    shift
    FORCE=1
  fi

  if [ ! -z "$MONARCH_PID" ]; then
    if [ -f "$MONARCH_PID" ]; then
      if [ -s "$MONARCH_PID" ]; then
        kill -0 `cat "$MONARCH_PID"` >/dev/null 2>&1
        if [ $? -gt 0 ]; then
          echo "PID file found but no matching process was found. Stop aborted."
          exit 1
        fi
      else
        echo "PID file is empty and has been ignored."
      fi
    else
      echo "\$MONARCH_PID was set but the specified file does not exist. Is Monarch running? Stop aborted."
      exit 1
    fi
  fi

  eval "\"$_RUNJAVA\"" $JAVA_OPTS \
    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \
    -Dmonarch.home="\"$MONARCH_HOME\"" \
    -Dmonarch.config="$MONARCH_CONFIG" \
    -Dmonarch.logs="$MONARCH_LOGS" \
    com.monarchapis.apimanager.startup.Bootstrap "$@" stop

  # stop failed. Shutdown port disabled? Try a normal kill.
  if [ $? != 0 ]; then
    if [ ! -z "$MONARCH_PID" ]; then
      echo "The stop command failed. Attempting to signal the process to stop through OS signal."
      kill -15 `cat "$MONARCH_PID"` >/dev/null 2>&1
    fi
  fi

  if [ ! -z "$MONARCH_PID" ]; then
    if [ -f "$MONARCH_PID" ]; then
      while [ $SLEEP -ge 0 ]; do
        kill -0 `cat "$MONARCH_PID"` >/dev/null 2>&1
        if [ $? -gt 0 ]; then
          rm -f "$MONARCH_PID" >/dev/null 2>&1
          if [ $? != 0 ]; then
            if [ -w "$MONARCH_PID" ]; then
              cat /dev/null > "$MONARCH_PID"
              # If Monarch has stopped don't try and force a stop with an empty PID file
              FORCE=0
            else
              echo "The PID file could not be removed or cleared."
            fi
          fi
          echo "Monarch stopped."
          break
        fi
        if [ $SLEEP -gt 0 ]; then
          sleep 1
        fi
        if [ $SLEEP -eq 0 ]; then
          if [ $FORCE -eq 0 ]; then
            echo "Monarch did not stop in time. PID file was not removed. To aid diagnostics a thread dump has been written to standard out."
            kill -3 `cat "$MONARCH_PID"`
          fi
        fi
        SLEEP=`expr $SLEEP - 1 `
      done
    fi
  fi

  KILL_SLEEP_INTERVAL=5
  if [ $FORCE -eq 1 ]; then
    if [ -z "$MONARCH_PID" ]; then
      echo "Kill failed: \$MONARCH_PID not set"
    else
      if [ -f "$MONARCH_PID" ]; then
        PID=`cat "$MONARCH_PID"`
        echo "Killing Monarch with the PID: $PID"
        kill -9 $PID
        while [ $KILL_SLEEP_INTERVAL -ge 0 ]; do
            kill -0 `cat "$MONARCH_PID"` >/dev/null 2>&1
            if [ $? -gt 0 ]; then
                rm -f "$MONARCH_PID" >/dev/null 2>&1
                if [ $? != 0 ]; then
                    if [ -w "$MONARCH_PID" ]; then
                        cat /dev/null > "$MONARCH_PID"
                    else
                        echo "The PID file could not be removed."
                    fi
                fi
                # Set this to zero else a warning will be issued about the process still running
                KILL_SLEEP_INTERVAL=0
                echo "The Monarch process has been killed."
                break
            fi
            if [ $KILL_SLEEP_INTERVAL -gt 0 ]; then
                sleep 1
            fi
            KILL_SLEEP_INTERVAL=`expr $KILL_SLEEP_INTERVAL - 1 `
        done
        if [ $KILL_SLEEP_INTERVAL -gt 0 ]; then
            echo "Monarch has not been killed completely yet. The process might be waiting on some system call or might be UNINTERRUPTIBLE."
        fi
      fi
    fi
  fi

elif [ "$1" = "version" ] ; then

  eval "\"$_RUNJAVA\"" $JAVA_OPTS \
    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \
    -Dmonarch.home="\"$MONARCH_HOME\"" \
    -Dmonarch.config="$MONARCH_CONFIG" \
    -Dmonarch.logs="$MONARCH_LOGS" \
    com.monarchapis.apimanager.startup.Bootstrap "$@" version

else

  echo "Usage: api-manager.sh ( commands ... )"
  echo "commands:"
  if $os400; then
    echo "  debug             Start Monarch in a debugger (not available on OS400)"
  else
    echo "  debug             Start Monarch in a debugger"
  fi
  echo "  jpda start        Start Monarch under JPDA debugger"
  echo "  run               Start Monarch in the current window"
  echo "  start             Start Monarch in a separate window"
  echo "  stop              Stop Monarch, waiting up to 5 seconds for the process to end"
  echo "  stop n            Stop Monarch, waiting up to n seconds for the process to end"
  echo "  stop -force       Stop Monarch, wait up to 5 seconds and then use kill -KILL if still running"
  echo "  stop n -force     Stop Monarch, wait up to n seconds and then use kill -KILL if still running"
  echo "  version           What version of Monarch are you running?"
  echo "Note: Waiting for the process to end and use of the -force option require that \$MONARCH_PID is defined"
  exit 1

fi
